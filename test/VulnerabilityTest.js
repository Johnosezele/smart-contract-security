const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Smart Contract Security Tests", function () {
  let vulnerableBank;
  let secureBank;
  let attacker;
  let owner;
  let user1;
  let user2;

  beforeEach(async function () {
    [owner, user1, user2] = await ethers.getSigners();

    // Deploy VulnerableBank
    const VulnerableBank = await ethers.getContractFactory("VulnerableBank");
    vulnerableBank = await VulnerableBank.deploy();

    // Deploy SecureBank
    const SecureBank = await ethers.getContractFactory("SecureBank");
    secureBank = await SecureBank.deploy();

    // Deploy AttackerContract
    const AttackerContract = await ethers.getContractFactory("AttackerContract");
    attacker = await AttackerContract.deploy(vulnerableBank.address);
  });

  describe("Reentrancy Attack", function () {
    it("Should be vulnerable to reentrancy in VulnerableBank", async function () {
      // Fund the bank with 10 ETH
      await vulnerableBank.connect(owner).deposit({ 
        value: ethers.utils.parseEther("10.0") 
      });

      // Initial balances
      const initialAttackerBalance = await ethers.provider.getBalance(attacker.address);
      const initialBankBalance = await ethers.provider.getBalance(vulnerableBank.address);

      // Perform attack with 1 ETH
      await attacker.connect(user1).attack({ 
        value: ethers.utils.parseEther("1.0")
      });

      // Final balances
      const finalAttackerBalance = await ethers.provider.getBalance(attacker.address);
      const finalBankBalance = await ethers.provider.getBalance(vulnerableBank.address);

      // Verify attack was successful
      expect(finalAttackerBalance).to.be.gt(initialAttackerBalance);
      expect(finalBankBalance).to.be.lt(initialBankBalance);
    });

    it("Should prevent reentrancy in SecureBank", async function () {
      // Fund the bank with 10 ETH
      await secureBank.connect(owner).deposit({ 
        value: ethers.utils.parseEther("10.0") 
      });

      // Deploy AttackerContract targeting SecureBank
      const AttackerContract = await ethers.getContractFactory("AttackerContract");
      const secureAttacker = await AttackerContract.deploy(secureBank.address);

      // Try to perform attack (should fail)
      await expect(
        secureAttacker.connect(user1).attack({ 
          value: ethers.utils.parseEther("1.0")
        })
      ).to.be.revertedWith("ReentrancyGuard: reentrant call");
    });
  });

  describe("Access Control", function () {
    it("Should allow anyone to call emergencyWithdraw in VulnerableBank", async function () {
      // Fund the bank
      await vulnerableBank.connect(owner).deposit({ 
        value: ethers.utils.parseEther("1.0") 
      });

      // Get initial balance of user1
      const initialBalance = await ethers.provider.getBalance(user1.address);

      // Any user can withdraw
      await vulnerableBank.connect(user1).emergencyWithdraw();

      // Check user1's balance increased
      const finalBalance = await ethers.provider.getBalance(user1.address);
      expect(finalBalance).to.be.gt(initialBalance);
    });

    it("Should only allow owner to call emergencyWithdraw in SecureBank", async function () {
      // Fund the bank
      await secureBank.connect(owner).deposit({ 
        value: ethers.utils.parseEther("1.0") 
      });

      // Non-owner should not be able to withdraw
      await expect(
        secureBank.connect(user1).emergencyWithdraw()
      ).to.be.revertedWith("Ownable: caller is not the owner");

      // Owner should be able to withdraw
      await expect(
        secureBank.connect(owner).emergencyWithdraw()
      ).to.not.be.reverted;
    });
  });

  describe("Timestamp Dependency", function () {
    it("Should demonstrate timestamp vulnerability in VulnerableBank", async function () {
      const result1 = await vulnerableBank.isLuckyDay();
      
      // Mine a new block with a specific timestamp
      await network.provider.send("evm_increaseTime", [15]);
      await network.provider.send("evm_mine");
      
      const result2 = await vulnerableBank.isLuckyDay();
      console.log("Lucky day results:", result1, result2);
    });
  });
});
